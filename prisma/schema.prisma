// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  name             String
  role             String    @default("user") // "user", "contractor", "admin"
  subscriptionStatus       String?   @default("free")
  subscriptionPlanId       String?
  subscriptionPackageType  String?   // "4letters", "6letters", "8letters"
  subscriptionLettersRemaining Int?  @default(0)
  subscriptionCurrentPeriodEnd DateTime?
  subscriptionDiscountPercent  Int?
  subscriptionReferredBy       String?
  stripeCustomerId String?
  isActive         Boolean   @default(true)
  lastLogin        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  contractor       Contractor?
  admin           Admin?
  letters         Letter[]
  documents       Document[]
  paymentSessions PaymentSession[]

  @@map("users")
}

model Contractor {
  id           String   @id @default(uuid())
  userId       String   @unique
  points       Int      @default(0)
  totalSignups Int      @default(0)
  username     String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupons Coupon[]

  @@map("contractors")
}

model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  permissions String[] // JSON array stored as strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Letter {
  id                    String   @id @default(uuid())
  userId                String
  title                 String
  content               String   @default("")
  letterType            String   @default("general")
  formData              Json     @default("{}")
  urgencyLevel          String   @default("standard")
  status                String   @default("draft") // "draft", "submitted", "ready", "sent"
  stage                 Int      @default(1) // 1-4 for progress tracking
  professionalGenerated Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailLogs EmailLog[]

  @@map("letters")
}

model Document {
  id                    String   @id @default(uuid())
  userId                String
  title                 String
  content               String   @default("")
  documentType          String
  category              String
  formData              Json     @default("{}")
  urgencyLevel          String   @default("standard")
  status                String   @default("draft") // "draft", "submitted", "ready", "sent"
  stage                 Int      @default(1) // 1-4 for progress tracking
  professionalGenerated Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailLogs EmailLog[]

  @@map("documents")
}

model Coupon {
  id             String   @id @default(uuid())
  contractorId   String
  code           String   @unique
  discountPercent Int
  maxUses        Int      @default(100)
  currentUses    Int      @default(0)
  createdAt      DateTime @default(now())
  expiresAt      DateTime

  // Relations
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@map("coupons")
}

model PaymentSession {
  id              String    @id @default(uuid())
  userId          String
  stripeSessionId String    @unique
  packageType     String    // "4letters", "6letters", "8letters"
  amount          Int       // Amount in cents
  status          String    @default("created") // "created", "completed", "failed"
  completedAt     DateTime?
  failedAt        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_sessions")
}

model WebhookLog {
  id        String   @id @default(uuid())
  eventId   String
  eventType String
  status    String   // "success", "failed", "error", "unhandled"
  error     String?
  eventData Json     @default("{}")
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  @@map("webhook_logs")
}

model EmailLog {
  id             String    @id @default(uuid())
  letterId       String?
  documentId     String?
  recipientEmail String
  sentAt         DateTime
  status         String    // "sent", "failed"
  error          String?

  // Relations
  letter   Letter?   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("email_logs")
}
