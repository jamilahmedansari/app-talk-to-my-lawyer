// AI Utilities - Gemini Integration for Letter Generation

interface GenerateLetterOptions {
  title: string;
  content: string;
  recipientName?: string;
  recipientAddress?: string;
}

/**
 * Generate a professional legal letter using Google Gemini AI
 * @param options - Letter generation parameters
 * @returns Generated letter content
 */
export async function generateLetterWithAI(
  options: GenerateLetterOptions
): Promise<string> {
  const { title, content, recipientName, recipientAddress } = options;

  const apiKey = process.env.GEMINI_API_KEY;
  const model = process.env.NEXT_PUBLIC_GEMINI_MODEL || "gemini-1.5-pro";

  if (!apiKey) {
    console.error("GEMINI_API_KEY not configured");
    // Fallback to simple formatting if no API key
    return formatLetterWithoutAI(options);
  }

  try {
    const prompt = buildLetterPrompt(options);

    // Call Gemini API
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 2048,
            topP: 0.9,
          },
        }),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Gemini API error:", response.status, errorText);
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();

    // Extract generated text from Gemini response
    const generatedText =
      data.candidates?.[0]?.content?.parts?.[0]?.text || "";

    if (!generatedText) {
      throw new Error("No content generated by Gemini");
    }

    return generatedText.trim();
  } catch (error) {
    console.error("AI generation failed:", error);
    // Fallback to simple formatting
    return formatLetterWithoutAI(options);
  }
}

/**
 * Build a detailed prompt for the AI to generate a professional legal letter
 */
function buildLetterPrompt(options: GenerateLetterOptions): string {
  const { title, content, recipientName, recipientAddress } = options;

  return `You are a professional legal letter writing assistant. Generate a formal, professional legal letter based on the following information:

LETTER TITLE: ${title}

USER REQUEST/CONTENT:
${content}

${recipientName ? `RECIPIENT NAME: ${recipientName}` : ""}
${recipientAddress ? `RECIPIENT ADDRESS: ${recipientAddress}` : ""}

INSTRUCTIONS:
1. Create a formal, professional legal letter based on the user's request
2. Use appropriate legal language and formatting
3. Include proper salutation and closing
4. Ensure the tone is professional and authoritative
5. Structure the letter with clear paragraphs
6. Include a date line at the top
7. If recipient information is provided, include proper address formatting
8. Do NOT mention AI or automated generation in the letter content
9. Make the letter sound natural and human-written
10. Keep the letter concise but comprehensive (aim for 300-500 words)

Generate ONLY the letter content. Do not include any explanatory text before or after the letter.`;
}

/**
 * Fallback formatting when AI is not available
 */
function formatLetterWithoutAI(options: GenerateLetterOptions): string {
  const { title, content, recipientName, recipientAddress } = options;
  const date = new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  return `${date}

${recipientAddress ? `${recipientAddress}\n\n` : ""}Dear ${recipientName || "Sir/Madam"},

RE: ${title}

${content}

Please feel free to contact me if you have any questions or require further information regarding this matter.

Sincerely,

[Your Name]
[Your Title]`;
}

/**
 * Legacy function - kept for backward compatibility
 * @deprecated Use generateLetterWithAI instead
 */
export async function generateLetterServer(prompt: string): Promise<string> {
  return generateLetterWithAI({
    title: "Legal Matter",
    content: prompt,
  });
}
